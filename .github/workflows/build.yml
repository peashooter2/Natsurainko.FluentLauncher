name: Build

# Reusable workflow for building and packaging FluentLauncher
on:
  workflow_call:
    inputs:
      create_package:
        required: false
        type: boolean
        default: true

jobs:
  build:
    runs-on: windows-latest
    env:
      Solution_Name: Natsurainko.FluentLauncher
      Project_Directory: Natsurainko.FluentLauncher
      Configuration: Debug
      Packages_DirectoryName: AppPackages
      Packages_Directory: Natsurainko.FluentLauncher\AppPackages
      SigningKey_Path: SigningKey.pfx

    strategy:
      matrix:
        architecture: [x64, arm64]

    name: Build (${{ matrix.architecture }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with: 
          vs-prerelease: true

      - name: Add NuGet Source for WCT Labs
        # if: steps.cache-nuget.outputs.cache-hit != 'true'
        run: dotnet nuget add source "https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-Labs/nuget/v3/index.json"

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore NuGet packages
        run: dotnet restore

      # Prepare FluentLauncher.Localization
      - name: Prepare FluentLauncher.Localization
        run: .\update-localization.ps1

      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Create app package
        env:
          Appx_Bundle: Never
          Platform: ${{ matrix.architecture }}
          Appx_Bundle_Platforms: ${{ matrix.architecture }}
          Appx_Package_Build_Mode: CI
          Appx_Package_Dir: ${{ env.Packages_DirectoryName }}\ # DO NOT REMOVE THE TRAILING SLASH
        run: |
          msbuild $env:Solution_Name /p:Platform=$env:Platform /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true

      - name: Prepare for bundling
        if: ${{ inputs.create_package }}
        id: preparation
        run: |

          # Get package name
          $msixFile = Get-Item -Path "${{ env.Packages_Directory }}\*\*.msix"
          $packageName = [System.IO.Path]::GetFileNameWithoutExtension($msixFile.FullName)
          echo "::set-output name=packageName::$packageName"

          # Get version number
          $version = $packageName -replace '^(.*?Natsurainko\.FluentLauncher)_(\d+\.\d+\.\d+\.\d+)(_x64|_arm64)$', '$2'
          echo "::set-output name=version::$version"

          # Get package directory
          $directory = $msixFile.DirectoryName
          echo "::set-output name=packageDirectory::$directory"

          # Rename .msixsym to .appxsym to pass Partner Center validation
          # Move .appx to root directory for making .msixupload
          mv "$directory\$packageName.msixsym" ".\$packageName.appxsym"

          # Move .msix for upload to artifacts
          mv ${{ env.Packages_Directory }}\*\*.msix "$packageName.msix"

      - name: Upload .msix to artifacts
        if: ${{ inputs.create_package }}
        uses: actions/upload-artifact@v4
        with:
          name: msix-${{ matrix.architecture }}
          path: ${{ steps.preparation.outputs.packageName }}.msix
